// Create the contract source code
var HumidityStorageSource = "contract Sequence { uint public sequenceNo; function Sequence() { sequenceNo = 0; } function nextVal() returns (uint number) { return ++sequenceNo; } } contract HumidityStorage is Sequence{ address owner; struct HumidThreshold{ uint lowerTimes100; uint upperTimes100; } struct HumidRecord { address node; uint valueTimes100; string deviceID; uint timestamp; } HumidThreshold public threshold; mapping (uint => HumidRecord) public humidDataMap; event HumidRecordData(address nodeAddress, uint humidValueTimes100, string deviceID, uint timestamp); event HumidThresholds(address nodeAddress, uint thresholdLowerTimes100, uint thresholdUpperTimes100, uint timestamp); function HumidityStorage(){ owner = msg.sender; threshold.lowerTimes100 = 0; threshold.upperTimes100 = 0; } function setHumidRecord(uint humidValueTimes100, string deviceID) { uint recordCount = nextVal(); address node = msg.sender; uint timestamp = now; humidDataMap[recordCount].node = node; humidDataMap[recordCount].valueTimes100 = humidValueTimes100; humidDataMap[recordCount].deviceID = deviceID; humidDataMap[recordCount].timestamp = timestamp; HumidRecordData(humidDataMap[recordCount].node, humidDataMap[recordCount].valueTimes100, humidDataMap[recordCount].deviceID, humidDataMap[recordCount].timestamp); } function setHumidThresholds(uint lowerThresholdTimes100, uint upperThresholdTimes100) { address node = msg.sender; uint timestamp = now; if (node == owner){ threshold.lowerTimes100 = lowerThresholdTimes100; threshold.upperTimes100 = upperThresholdTimes100; HumidThresholds(node, threshold.lowerTimes100, threshold.upperTimes100, timestamp); } } function reset() { for (uint i = 1; i<=sequenceNo; i++){ delete humidDataMap[i]; } sequenceNo = 0; } }"

// Compile the source with solc - Solidity Compiler
var HumidityStorageCompiled = web3.eth.compile.solidity(HumidityStorageSource)

// Extracts info from contract, print json serialisation on console
HumidityStorageCompiled.HumidityStorage.info

// Create contract object
var HumidityStorageContract= web3.eth.contract(HumidityStorageCompiled.HumidityStorage.info.abiDefinition);

// Submit contract for inclusion in the Blockchain
var HumidityStorage = HumidityStorageContract.new( { from:web3.eth.accounts[0], data:HumidityStorageCompiled.HumidityStorage.code, gas: 10000000 }, function(e, contract){ if(!e) { if(!contract.address) { console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined..."); } else { console.log("Contract mined! Address: " + contract.address); console.log(contract); } } })


>>>>>>>>>>>>>>>>>>

contract Sequence {
    
	uint public sequenceNo;
    
    function Sequence() { 
		sequenceNo = 0;
	} 
	
	function nextVal() returns (uint number) { 
		return ++sequenceNo;
	} 
	
}


contract HumidityStorage is Sequence{

    address owner;
    
    struct HumidThreshold{
    	uint lowerTimes100;
    	uint upperTimes100;
    }
    
	struct HumidRecord {
	    address node;
	    uint valueTimes100;
		string deviceID;
	    uint timestamp;
	}
	
	HumidThreshold public threshold;
	
    mapping (uint => HumidRecord) public humidDataMap;
    
    event HumidRecordData(address nodeAddress, 
        uint humidValueTimes100,
		string deviceID, 
	    uint timestamp); 
	    
	event HumidThresholds(address nodeAddress, 
	    uint thresholdLowerTimes100, 
        uint thresholdUpperTimes100,
        uint timestamp); 
		
	function HumidityStorage(){
		owner = msg.sender;
		threshold.lowerTimes100 = 0;
		threshold.upperTimes100 = 0;	
	}

    function setHumidRecord(uint humidValueTimes100, string deviceID)
	{ 
    	uint recordCount = nextVal();
        address node = msg.sender;
        uint timestamp = now;
            
        humidDataMap[recordCount].node = node;
        humidDataMap[recordCount].valueTimes100 = humidValueTimes100;
		humidDataMap[recordCount].deviceID = deviceID;
    	humidDataMap[recordCount].timestamp = timestamp;
    	    
    	HumidRecordData(humidDataMap[recordCount].node, humidDataMap[recordCount].valueTimes100, humidDataMap[recordCount].deviceID, humidDataMap[recordCount].timestamp);
	}
	
	
	function setHumidThresholds(uint lowerThresholdTimes100, uint upperThresholdTimes100)
	{ 
	
        address node = msg.sender;
        uint timestamp = now;
		
		if (node == owner){            
			threshold.lowerTimes100 = lowerThresholdTimes100;
			threshold.upperTimes100 = upperThresholdTimes100;
				
			HumidThresholds(node, threshold.lowerTimes100, threshold.upperTimes100, timestamp);
		}
	}

	
	function reset()
	{ 
	    for (uint i = 1; i<=sequenceNo; i++){
             delete humidDataMap[i];
        }
		sequenceNo = 0;
	}

 }

>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
